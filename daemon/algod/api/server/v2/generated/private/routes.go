// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"N/8/AAD//+X/w4MikAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
