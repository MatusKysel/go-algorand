// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"33y++f8BAAD//xCNuZcpkAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
